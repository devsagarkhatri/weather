{"version":3,"sources":["components/bottom.jsx","components/weather.jsx","components/top.jsx","key.js","store1.jsx","App.js","serviceWorker.js","index.js"],"names":["BottomSection","Component","props","state","className","fetchWeather","require","query","a","axios","get","q","units","key","data","Store1","useState","setWeather","search1","e","loc","window","prompt","console","log","Container","Row","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+ZAkBeA,G,kBCfOC,YCCGA,Y,wDFDrB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAKf,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,kB,GARHH,c,iBGMfI,GANCC,EAAQ,IAMG,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACHC,IAAMC,IAJf,oDAI6B,CACrCC,EAAGJ,EACHK,MAAO,SACPC,IARO,qCAIa,uBACjBC,EADiB,EACjBA,KADiB,kBAMjBA,GANiB,2CAAH,uDCkDVC,EAnDF,WAAM,IAAD,EACYC,mBAAS,IADrB,gCAEgBA,mBAAS,KAFzB,mBAEEC,GAFF,WAGRC,EAAO,uCAAG,WAAOC,GAAP,iBAAAX,EAAA,yDAEC,KADTY,EAAMC,OAAOC,OAAO,sBADZ,gCAGejB,EAAae,GAH5B,OAGEN,EAHF,OAIJG,EAAWH,GACXS,QAAQC,IAAIJ,GALR,2CAAH,sDAab,OACI,kBAACK,EAAA,EAAD,CAAWrB,UAAU,iBACjB,kBAACqB,EAAA,EAAD,CAAWrB,UAAU,kBAEjB,kBAACsB,EAAA,EAAD,CAAKtB,UAAU,eAEX,yBAAKA,UAAU,iBAAgB,6BAC3B,yBAAKA,UAAU,YACX,yBAAKA,UAAU,SAAf,oBAGA,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,UAAU,IAAS,6BAClC,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAQ,uBAAGA,UAAU,uCACpC,yBAAKA,UAAU,mBAAf,cAEJ,yBAAKA,UAAU,UAAf,SACA,uBAAGuB,QAAST,GAAZ,uBAMhB,kBAACQ,EAAA,EAAD,CAAKtB,UAAU,kBAEX,kBAAC,EAAD,CAAeU,KAAM,SCrC1Bc,MANf,WACE,OACE,kBAAC,EAAD,OCIgBC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.280f3b8f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./bottom.css\";\nclass BottomSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return ( \n            <div className=\"bottom-container\">\n                <div className=\"gradient\">\n                    \n                </div>\n            </div>\n         );\n    }\n}\n \nexport default BottomSection;","import React, { Component } from 'react';\nimport './../../node_modules/weather-underground-icons/dist/wu-icons-style.css';\nimport './weather.css';\nclass Weather extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            data:this.props.data1,\n         }\n    }\n    render() { \n\n        \n\n\n        return ( \n            <div></div>\n         );\n    }\n}\n \nexport default Weather;","import React, { Component } from 'react';\nimport './top.css';\nimport Weather from './weather';\n\nclass TopSection extends Component {\n    \n    render() { \n        const { data } = this.props;\n        var getData = () => {\n            var loc = window.prompt(\"Enter Location : \");\n            if (loc!='') { \n                this.props.query1(loc);\n            }\n            \n        }\n        return ( \n            <div className=\"top-container\"><br />\n                \n                <div className=\"gradient\">\n                    <div className=\"title\">\n                        Weather Forecast\n                    </div>\n                    <div className=\"weather-container\">\n                        \n                                         \n\n                        <div className=\"header\">{data}</div><br></br>\n                        <div className=\"inner-container\">\n                            <div className=\"image\"><i className=\"wu wu-white wu-64 wu-mostlycloudy\"></i></div>\n                            <div className=\"current-weather\">32 &deg;C </div>    \n                        </div>    \n                        <div className=\"footer\">Sunny</div>\n                        <a onClick={getData}>Change Location</a>\n                </div>                \n                </div>\n            </div>\n         );\n    }\n}\n \nexport default TopSection;","import axios from 'axios';\n\nlet weather = require('openweather-apis');\nlet data=[];\nconst API_KEY= \"7926496c354685ac73197e6c1d532ac1\";\nconst BASE_URL= \"https://api.openweathermap.org/data/2.5/forecast?\";\n\n\nexport const fetchWeather = async (query) => {\n    const {data} = await axios.get(BASE_URL, {\n        q: query,\n        units: 'metric',\n        key:API_KEY,\n    });\n    return data;\n}\n\n// export function getLocation() {\n//     if (navigator.geolocation) {\n//         navigator.geolocation.watchPosition(showPosition);\n//     } \n// }\n\n// export function showPosition(position) {\n//     weather.setCoordinate(position.coords.latitude, position.coords.longitude);\n\n//     // weather.setCoordinate( 25.3176, 82.9739);\n//     weather.setUnits('metric');\n//     weather.setAPPID(API_KEY);\n//     weather.getAllWeather(function (err, data) {\n//         // data = name1;           \n        \n//     });\n//     return data;\n// }\n\n// export function get() {\n//     console.log(data);\n//     return data;\n// }\n","import React, { Component } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport TopSection from './components/top';\nimport BottomSection from './components/bottom';\nimport { get,getLocation, fetchWeather} from './key.js';\nimport { useState } from 'react';\n\nconst Store1=()=> {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    const search1 = async (e) => {\n        var loc = window.prompt(\"Enter Location : \");\n            if (loc!='') { \n                const data = await fetchWeather(loc);\n                setWeather(data);\n                console.log(loc);\n            }\n    }\n    const search = async (e) => {        \n        const data = await fetchWeather(query)\n        setWeather(data);\n        setQuery('');    \n    }\n    return ( \n        <Container className=\"app-container\">                \n            <Container className=\"main-container\">\n\n                <Row className=\"top-section\">                    \n                    {/* <TopSection data1={''} query1={search}/> */}\n                    <div className=\"top-container\"><br />                \n                        <div className=\"gradient\">\n                            <div className=\"title\">\n                                Weather Forecast\n                            </div>\n                            <div className=\"weather-container\">\n                                <div className=\"header\">{''}</div><br></br>\n                                <div className=\"inner-container\">\n                                    <div className=\"image\"><i className=\"wu wu-white wu-64 wu-mostlycloudy\"></i></div>\n                                    <div className=\"current-weather\">32 &deg;C </div>    \n                                </div>    \n                                <div className=\"footer\">Sunny</div>\n                                <a onClick={search1}>Change Location</a>\n                            </div>                \n                        </div>\n                    </div>                    \n                </Row>\n\n                <Row className=\"bottom-section\">\n\n                    <BottomSection data={''} />\n                    \n                </Row>\n            </Container>\n        </Container>\n        );\n}\n\n \nexport default Store1;","import React from 'react';\n\n\nimport './App.css';\nimport Store1 from './store1';\n\nfunction App() {\n  return (\n    <Store1/>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}