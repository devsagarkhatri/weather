{"version":3,"sources":["store1.jsx","components/top.jsx","components/bottom.jsx","key.js","store.jsx","App.js","serviceWorker.js","index.js"],"names":["Store1","props","state","loc","temp","store","search","bind","sunny","rainy","cloudy","city","this","setState","fetch","then","res","status","set","json","console","log","success","data","error","result","statusText","ex","message","Container","className","style","backgroundImage","textTransform","Button","variant","onClick","Component","TopSection","href","window","prompt","query1","BottomSection","weather","require","getLocation","navigator","geolocation","watchPosition","showPosition","position","setCoordinate","coords","latitude","longitude","setUnits","setAPPID","getAllWeather","err","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a0322331.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Button} from 'react-bootstrap';\n//import { getLocation } from './key.js';\n\nclass Store1 extends Component {\n    constructor(props){\n        super(props)        \n        this.search = this.search.bind(this)\n        this.state = { \n            loc:'weather',\n            sunny: 'sun',\n            rainy: 'rain',\n            cloudy:'cloud',\n            temp:'https://source.unsplash.com/1600x900/?',\n            store:'',\n            city:''\n         }\n    }\n    state = { \n        loc:'clear',\n        temp:'https://source.unsplash.com/1600x900/?',\n        store:[]\n     }\n     async search(){\n        // let item = window.prompt(\"Enter Location : \");\n        let item = 'Delhi';\n        this.setState({loc:item});         \n        var key = '7926496c354685ac73197e6c1d532ac1';\n        var URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + item+ '&appid=' + key;        \n        \n        const result = await fetch(URL).then(function(res){\n            try{        \n                if (res.status === 200) {\n                    let set = res.json();\n                    console.log(set);\n                    return { success: true, data: set };\n                }            \n                return { success: false, error: result.statusText };\n              } \n              catch (ex) {\n                return { success: false, error: ex.message };\n              }\n        });\n        this.setState({store:result});\n        console.log(\"state.store => \",this.state.store);    \n     }\n\n    componentDidMount(){\n        this.search();\n    }\n    render() {    \n        return ( \n            <Container className=\"app-container\">                \n                <Container className=\"main-container\">                \n                        <div className=\"top-container\" style={{backgroundImage: `url(${this.state.temp+this.state.loc})`}}>\n                        <div className=\"gradient\">\n                            <div className=\"title\"><br/>Weather Forecast </div>\n                            <div className=\"weather-container\">\n                                <div className=\"header\">{''}</div><br/>\n                                <div className=\"inner-container\">\n                                    <div className=\"image\"><i className=\"wu wu-white wu-64 wu-mostlycloudy\"></i></div><br/>\n                                    <div className=\"current-weather\">32 &deg;C </div>    \n                                </div>    \n                                <div className=\"footer\">\n                                    <font style={{textTransform: 'capitalize'}}>Current Search :{this.state.loc}</font>\n                                    <br/><br/>\n                                    <Button variant=\"light\"  onClick={this.search}>Change Location</Button>\n                                </div>\n                            </div>                \n                        </div>\n                    </div>                                    \n                </Container>            \n            </Container>\n            );\n    }\n\n} \nexport default Store1;\n\n","import React, { Component } from 'react';\nimport './top.css';\n// import Weather from './weather';\n\nclass TopSection extends Component {\n    \n    render() { \n        // const { data } = this.props;\n        var getData = () => {\n            var loc = window.prompt(\"Enter Location : \");\n            if (loc!=='') { \n                this.props.query1(loc);\n            }\n            \n        }\n        return ( \n            <div className=\"bottom-container\">\n                <div className=\"gradient\">                 \n                \n                    <div className=\"top-containe\"><br />\n                        \n                        <div className=\"gradient\">\n                            <div className=\"title\">\n                                Weather Forecast\n                            </div>\n                            <div className=\"weather-container\">\n                                \n                                <div className=\"inner-container\">\n                                    <div className=\"image\"><i className=\"wu wu-white wu-64 wu-mostlycloudy\"></i></div>\n                                    <div className=\"current-weather\">32 &deg;C </div>    \n                                </div>    \n                                <div className=\"footer\">Sunny</div>\n                                <a href={\"#\"} onClick={getData}>Change Location</a>\n                        </div>                \n                        </div>\n                    </div>\n                </div>\n        </div>\n         );\n    }\n}\n \nexport default TopSection;","import React, { Component } from 'react';\nimport \"./bottom.css\";\nclass BottomSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return ( \n            <div className=\"bottom-container\">\n                <div className=\"gradient\">\n                    \n                </div>\n            </div>\n         );\n    }\n}\n \nexport default BottomSection;","// import axios from 'axios';\n// import { useCallback } from 'react';\n\nlet weather = require('openweather-apis');\n\nconst API_KEY= \"7926496c354685ac73197e6c1d532ac1\";\n\nexport async function weatherBalloon( cityID ) {\n    var key = '7926496c354685ac73197e6c1d532ac1';\n    var URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + cityID+ '&appid=' + key;\n    console.log(URL);\n    try {\n        const result = await fetch(URL);\n    \n        if (result.status === 200) {\n          return { success: true, data: await result.json() };\n        }\n    \n        return { success: false, error: result.statusText };\n      } catch (ex) {\n        return { success: false, error: ex.message };\n      }\n    //  const result = await fetch(URL)  \n    // .then(function(resp) { return resp.json() }) // Convert data to json\n    // .then(function(data) {\n        \n    //     console.log(data);\n    //     console.log(typeof(data));\n    //     return [data];\n    // })\n    // .catch(function() {\n    //   // catch any errors\n    // });\n    \n  }\n\n\nexport function getLocation() {\n    if (navigator.geolocation) {\n        return navigator.geolocation.watchPosition(showPosition);        \n    } \n}\n\nexport function showPosition(position) {\n    weather.setCoordinate(position.coords.latitude, position.coords.longitude);\n    weather.setUnits('metric');\n    weather.setAPPID(API_KEY);\n    weather.getAllWeather(function (err, data) {          \n        console.log(data);\n        return data.json();\n        \n        \n    });\n    \n}\n\n","import React, { Component } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport TopSection from './components/top';\nimport BottomSection from './components/bottom';\nimport { getLocation} from './key.js';\n\nclass Store extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            data:[],\n        }\n    }\n        \n    componentDidMount() {\n        \n        this.setState({ data: getLocation()});\n    };\n\n    render() { \n        return ( \n            <Container className=\"app-container\">                \n                <Container className=\"main-container\">\n                    <Row className=\"top-section\">\n                      \n                        {console.log(this.state.data)}\n                        <TopSection data1={this.state.data} />\n                        \n                    </Row>\n                    <Row className=\"bottom-section\">\n                        <BottomSection  data={this.state.data}/>\n                    </Row>\n                </Container>\n            </Container>\n         );\n    }\n}\n \nexport default Store;","import React from 'react';\nimport './App.css';\nimport Store1 from './store1';\nimport Store from './store';\n\nfunction App() {\n  return (\n    <Store1/>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}