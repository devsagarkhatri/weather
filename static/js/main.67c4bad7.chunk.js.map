{"version":3,"sources":["store.jsx","App.js","serviceWorker.js","index.js"],"names":["Store","state","loc","temp","weatherType","data","textData","forecastDays","isLoaded","showPosition","position","a","URL","coords","latitude","longitude","fetch","then","response","json","setState","current","condition","location","getWeatherType","gotData","text","undefined","toLowerCase","includes","this","getLocation","navigator","geolocation","watchPosition","item","window","prompt","temp_c","Container","className","style","backgroundImage","backgroundSize","background","minHeight","alignContent","alignSelf","alignItems","border","rowSpan","src","height","alt","maxHeight","textTransform","onClick","event","search","borderRadius","padding","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67c4bad7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container} from 'react-bootstrap';\nimport \"./App.css\";\n\nclass Store extends Component {    \n        \n  state = {\n      loc: \"\",\n      temp: \"https://source.unsplash.com/1600x900/?\",\n      weatherType: \"clouds\",\n      data: [],\n      textData:[],\n      forecastDays: 5,\n      isLoaded: false,        \n  };\n    \n  componentDidMount() {\n    this.getLocation();\n  }\n  \n  getLocation() {\n    if (navigator.geolocation) {      \n      return navigator.geolocation.watchPosition(this.showPosition);\n    }\n  }\n  \n  showPosition = async (position) => {\n    // console.log(\"position=>>\", position);\n    var key = \"43a74cbff04a4ab2afe144930211506\";\n    var URL = \"https://api.weatherapi.com/v1/current.json?key=\" + key + \"&q=\" + position.coords.latitude +\",\"+ position.coords.longitude+ \"&aqi=no\";\n    await fetch(URL).then((response) => response.json()).then((data) => {\n      this.setState({\n        data: data.current,\n        isLoaded: true\n      });\n      this.setState({ textData: this.state.data.condition,loc:data.location['name'] });\n      // console.log(data);\n      this.getWeatherType();\n    });\n  }\n\n  search() {\n    let item = window.prompt(\"Enter Location : \");\n    if(true){//item.match('/^[A-Za-z]+$/')\n      this.setState({ loc: item,isLoaded:false }, () => {\n        // console.log(this.state.loc);\n        this.gotData();\n      });        \n      }      \n  }\n          \n  gotData = async () => {\n    if (!this.state.isLoaded) {\n      var key = \"43a74cbff04a4ab2afe144930211506\";\n      var URL = \"https://api.weatherapi.com/v1/current.json?key=\" + key + \"&q=\" + this.state.loc + \"&aqi=no\";\n      await fetch(URL).then((response) => response.json()).then((data) => {            \n        this.setState({\n          data: data.current,            \n          isLoaded: true\n        });\n        this.setState({ textData: this.state.data.condition });\n        this.getWeatherType();\n      })\n      \n    }      \n  }\n\n  getWeatherType = () => {\n\n    var text = this.state.textData['text'];\n    if (text !== undefined) {\n      if (text.toLowerCase().includes(\"rain\")) {\n        this.setState({ weatherType: \"rain\" });\n      }\n      else if (text.toLowerCase().includes(\"cloud\")) {\n        this.setState({ weatherType: \"cloud\" });\n      }\n      else if (text.toLowerCase().includes(\"clear\")) {\n        this.setState({ weatherType: \"clear\" });\n      }\n      else if (text.toLowerCase().includes(\"sun\")) {\n        this.setState({ weatherType: \"sun\" });\n      }\n      else if (text.toLowerCase().includes(\"sun\")) {\n        this.setState({ weatherType: \"sun\" });\n      }\n      else if (text.toLowerCase().includes(\"thunder\")) {\n        this.setState({ weatherType: \"thunder\" });\n      }\n      else if (text.toLowerCase().includes(\"mist\")) {\n        this.setState({ weatherType: \"mist\" });\n      }  \n    }      \n  }\n  \n    \n\n  render() {\n    \n    var { temp_c } = this.state.data;\n    var text = this.state.textData['text'] || '';\n    // console.log(this.state.weatherType);\n    return ( \n        <Container className=\"app-container\">                \n            <Container className=\"main-container\">\n                <div\n                  className=\"top-container\"\n                  style={{\n                    backgroundImage: `url(${this.state.temp + this.state.weatherType})`,\n                    backgroundSize: \"100% 100%\",\n                    \n                  }}\n                >\n                  <div className=\"gradient\" style={{background:\"linear-gradient(180deg,rgba(255,255,255,1),rgba(255,255,255,.5) 70%,transparent)\",minHeight:\"100%\"}}>\n                    <div className=\"title\">\n                      <br />\n                      <h1>Weather Forecast{\" \"}</h1>\n                    </div>\n                    <div className=\"weather-container\">\n                      <div className=\"header\">{\"\"}</div>\n                      <br />\n                      <div className=\"inner-container\" style={{alignContent:\"center\",alignSelf:\"center\",alignItems:\"center\"}}>\n                        <center><table border=\"0\">\n                          <tbody>\n                            <tr>\n                              <td rowSpan=\"1\"><img src={this.state.textData['icon']} height=\"150\" alt=\"\"/></td>\n                              <td style={{maxHeight:\"20px\"}}>\n                                <h2>{temp_c} &deg;C{\" \"}</h2>\n                                {text}\n                              </td>\n                            </tr>                            \n                          </tbody>\n                        </table>\n                        </center>                                                \n                      </div>\n                      <div className=\"footer\">                        \n                        <font style={{ textTransform: \"capitalize\" }}>\n                          Current Search : {this.state.loc}\n                        </font>\n                        <br/><br/>\n                        <button onClick={(event)=>this.search()} style={{borderRadius:\"15px\",padding:\"7px\", background:\"lightblue\"}}>\n                          Change Location\n                        </button>\n                      </div>\n                    </div>\n                    <br/><br/><br/>\n                  </div>\n                </div>\n            </Container>\n        </Container>\n      );\n  }\n}\n \nexport default Store;","import React from \"react\";\nimport \"./App.css\";\nimport Store from './store';\n\nfunction App() {\n  return <Store />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}